package hashmap

import "fmt"

// IsIsomorphic проверяет, являются ли строки a и b изоморфными
// и возвращает сообщение о результате проверки.
func IsIsomorphic(a, b string) string {
	// Шаг 1: Проверяем, имеют ли строки одинаковую длину
	if len(a) != len(b) {
		return fmt.Sprintf("Не являются изоморфными, так как они имеют разную длину.\n")
	}

	// Создаем хеш-таблицы для хранения соответствий символов
	hashMapA := NewHashMap() // Хеш-таблица для символов из строки a
	hashMapB := NewHashMap() // Хеш-таблица для символов из строки b

	// Шаг 2: Проходим по каждому символу обеих строк
	for i := 0; i < len(a); i++ {
		// Проверяем соответствие символа из строки a
		valA, _ := hashMapA.Get(rune(a[i])) // Получаем соответствующий символ из хеш-таблицы для строки a
		if valA != 0 {
			// Если символ уже имеет соответствие, проверяем, совпадает ли оно с текущим символом из строки b
			if valA != rune(b[i]) {
				// Если не совпадает, строки не являются изоморфными
				return fmt.Sprintf("Не являются изоморфными.\n")
			}
		} else {
			// Если символ не имеет соответствия, добавляем его в хеш-таблицу
			hashMapA.Put(rune(a[i]), rune(b[i])) // Устанавливаем соответствие между символами
		}

		// Проверяем соответствие символа из строки b
		valB, _ := hashMapB.Get(rune(b[i])) // Получаем соответствующий символ из хеш-таблицы для строки b
		if valB != 0 {
			// Если символ уже имеет соответствие, проверяем, совпадает ли оно с текущим символом из строки a
			if valB != rune(a[i]) {
				// Если не совпадает, строки не являются изоморфными
				return fmt.Sprintf("Не являются изоморфными.\n")
			}
		} else {
			// Если символ не имеет соответствия, добавляем его в хеш-таблицу
			hashMapB.Put(rune(b[i]), rune(a[i])) // Устанавливаем соответствие между символами
		}
	}

	// Если все соответствия верны, строки являются изоморфными
	return fmt.Sprintf("Являются изоморфными.\n")
}
